#+TITLE: Emacs Configuration
#+AUTHOR: Žiga Stopinšek
#+EMAIL: sigi.kajzer@gmail.com
#+OPTIONS: toc:3 num:nil ^:nil
* Basic information
Works on GNU/Linux and also MS/Windows (but not everything, 
mainly because of requrements). 
** System requirements
TODO
*** Optional
TODO
- mu (email)
  - html2text
* Before main INIT
Disable menu bar and toolbar and scrollbar for more prettier initialization
#+BEGIN_SRC emacs-lisp :tangle yes
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(setq debug-on-error nil)
(setq byte-compile-warnings '(not free-vars mapcar suspicious obsolete))
#+END_SRC
* Global variables and settings
Global own variables
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq own/emacs-d-dirs '("lib/" "lib/ext/" "etc/themes/")
        own/mu4e-load-path "/usr/share/emacs/site-lisp/mu4e"

        own/nick ""
        own/full-name ""
        own/email ""

        own/is-nox nil
        own/enable-email nil
        own/enable-themes t

        own/org-docs-dir '("~")
		own/org-directory "~/docs/org/"
        
        own/spaces-projects '("proj1" "proj2")
        own/tabs-projects '("jsproj1")

        own/py-venvs "~/.virtualenvs"
		own/go-path "~/env/go")
#+END_SRC

Mode configuration variables
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq paradox-github-token "")
#+END_SRC

Modeline shortcuts
#+begin_src emacs-lisp :tangle yes
(defvar own/mode-line-cleaner-alist
  `((auto-complete-mode . " α")
    (yas/minor-mode . "")
	(yas-minor-mode . "")
    (eldoc-mode . " eld")
    (abbrev-mode . "")
	(flymake-mode . " Φ")
	(flyspell-mode . " φ")
	(git-gutter-mode . "")
	(volatile-highlights-mode . "")
	(tern-mode . " τ")
	(skewer-mode . "")
	(undo-tree-mode . "")
	(multi-web-mode . "mwm")
	(skewer-html-mode . "")
	(zencoding-mode . " ζ")
    ;; Major modes
    (lisp-interaction-mode . "λ")
    (python-mode . "py")
	(html-mode . "w")
	(js2-mode . "js")
    (emacs-lisp-mode . "el"))
  "Alist for `clean-mode-line'.
 
When you add a new element to the alist, keep in mind that you
must pass the correct minor/major mode symbol and a string you
want to use in the modeline *in lieu of* the original.")
#+end_src
Global void configuration functions that can be overwritten via private
#+begin_src emacs-lisp :tangle yes

#+end_src

* Basic functions
#+begin_src emacs-lisp :tangle yes
(defun own/etc-load (file)
  (let ((etc-path (concat user-emacs-directory "etc/" file)))
	(message etc-path)
	(if (file-exists-p etc-path)
		(progn
		  (load-file etc-path)
		  t)
	  nil)))
#+end_src
* Load path, privates and packages
** Add directories to load path
#+BEGIN_SRC emacs-lisp :tangle yes
(mapcar '(lambda (dir)
		   (add-to-list 'load-path (concat user-emacs-directory dir)))
		own/emacs-d-dirs)
#+END_SRC
** Load privates
Load privates that will overwrite global variables
#+begin_src emacs-lisp :tangle yes
(unless (own/etc-load "private.el.gpg")
  (own/etc-load "private.el"))
#+end_src
** Load packages
The own-packages file contains a list of packages that need to be installed
via package.el extension.
#+begin_src emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
(own/etc-load "packages.el")
#+end_src


* Basic configuration

** Global preferences

Preferences
#+begin_src emacs-lisp :tangle yes
(setq make-backup-files nil ; Disable backup files
      next-line-add-newlines t) ; Make newline at the bottom

(define-key global-map (kbd "RET") 'newline-and-indent) ; indent after RETURN

#+end_src

Libraries
#+begin_src emacs-lisp :tangle yes
(require 'cl)
(require 'fullscreen) ; M-x maximize
#+end_src

** File & project management

Recent files
#+begin_src emacs-lisp :tangle yes
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 50)
#+end_src

Projectile
#+begin_src emacs-lisp :tangle yes
(require 'projectile)

(setq projectile-mode-line
  '(" " (:eval (format "π[%s]" (projectile-project-name)))))

(setq projectile-completion-system 'grizzl) 
(projectile-global-mode)
(setq projectile-mode-line
  '(" " (:eval (format "π[%s]" (projectile-project-name)))))
#+end_src

** Various

Autocompile elisp files
#+begin_src emacs-lisp :tangle yes
(require 'auto-compile)
(auto-compile-on-load-mode 1)
(auto-compile-on-save-mode 1)
#+end_src

Enable key chord mode TODO: revisit
#+begin_src emacs-lisp :tangle yes
;(require 'key-chord)
;(key-chord-mode 1)
#+end_src

IDO
#+begin_src emacs-lisp :tangle yes
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-use-faces nil) ;; disable ido faces to see flx highlights.
#+end_src

SMEX: IDO for elisp functions
Overwrite default M-x with smex and store the default M-x into another Keybinding. This keybindings are not in the keybindings section because they overwrite default functionallity.

#+begin_src emacs-lisp :tangle yes
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

UNDO

#+begin_src emacs-lisp :tangle yes
(require 'undo-tree) ; undo tree
(global-undo-tree-mode) ; undo tree everywhere
#+end_src

Disable default features

#+begin_src emacs-lisp :tangle yes
(global-unset-key [(up)])
(global-unset-key [(down)])
(global-unset-key [(left)])
(global-unset-key [(right)])
(global-unset-key [(prior)])
(global-unset-key [(next)])
(global-unset-key [(home)])
(global-unset-key [(next)])
(global-unset-key (kbd "<C-left>"))
(global-unset-key (kbd "<C-right>"))
(global-unset-key (kbd "<C-up>"))
(global-unset-key (kbd "<C-down>"))
#+end_src

Other
#+begin_src emacs-lisp :tangle yes
(require 'expand-region) ; Expand selection region
#+end_src


* Functions & hooks

** Text manipulation
#+begin_src emacs-lisp :tangle yes
(defun own/new-line-after (times)
  "Creates a new line after current line"
  (interactive "p")
  (save-excursion
	(move-end-of-line 1)
	(newline times)))
(defun own/new-line-before (times)
  "Creates a new line before the current line"
  (interactive "p")
  (save-excursion
	(move-beginning-of-line 1)
	(newline times)))
(defun own/duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank))
(defun own/combine-lines ()
  (interactive)
  (join-line -1))
#+end_src

** Windows and buffers
#+begin_src emacs-lisp :tangle yes
(defun own/split-window-multiple-ways (x y)
  "Split the current frame into a grid of X columns and Y rows."
  (interactive "nColumns: \nnRows: ")
  ;; one window
  (delete-other-windows)
  (dotimes (i (1- x))
	(split-window-horizontally)
	(dotimes (j (1- y))
	  (split-window-vertically))
	(other-window y))
  (dotimes (j (1- y))
	(split-window-vertically))
  (balance-windows))
(defun own/show-buffers-with-major-mode (mode)
  "Fill all windows of the current frame with buffers using major-mode MODE."
  (interactive
   (let* ((modes (loop for buf being the buffers
					   collect (symbol-name (with-current-buffer buf
											  major-mode)))))
	 (list (intern (completing-read "Mode: " modes)))))
  (let ((buffers (loop for buf being the buffers
					   when (eq mode (with-current-buffer buf
									   major-mode))
					   collect buf)))
	(dolist (win (window-list))
	  (when buffers
		(show-buffer win (car buffers))
		(setq buffers (cdr buffers))))))
(defun own/delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))
(defun own/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+end_src
** Own extensions
Velocity
TODO: revisit
#+begin_src emacs-lisp :tangle yes
;(defun own/helm-velocity ()
;  (interactive)
;  (require 'helm-mode)
;  (helm-do-grep-1 helm-velocity-dir t nil helm-velocity-ext))
#+end_src
** Various shortcuts
#+begin_src emacs-lisp :tangle yes
(defun own/toggle-tabs ()
  (interactive)
  (set-variable 'indent-tabs-mode (not indent-tabs-mode)))
(defun own/tabs-on ()
  (interactive)
  (set-variable 'indent-tabs-mode t))
(defun own/tabs-off ()
  (interactive)
  (set-variable 'indent-tabs-mode nil))

(defun own/google-search ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))

(defun own/fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "slovenian") "english" "slovenian")))
	(ispell-change-dictionary change)
	(message "Dictionary switched from %s to %s" dic change)
	))

(defun own/find-user-init-file ()
  "Edit the `user-init-file', in another window."
  (interactive)
  (find-file-other-window user-init-file))

(defun own/find-shell-init-file ()
  "Edit the shell init file in another window."
  (interactive)
  (let* ((shell (car (reverse (split-string (getenv "SHELL") "/"))))
         (shell-init-file (cond
                           ((string-equal "zsh" shell) ".zshrc")
                           ((string-equal "bash" shell) ".bashrc")
                           (t (error "Unknown shell")))))
    (find-file-other-window (expand-file-name shell-init-file (getenv "HOME")))))

(defun own/goto-url ()
  "Open browser"
  (interactive)
  (browse-url 
	 (concat "http://" (read-string "URL: ") )))

(defun own/show-filename ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name)))

#+end_src
** Helpers functions
#+begin_src emacs-lisp :tangle yes
(defun own/set-pyflakes (bin-path)
  "Set the pyflakes executive"
  (interactive "FPyflakes find file: ")
  (setq flymake-python-pyflakes-executable bin-path))

(defun own/flymake-report-status-slim (e-w &optional status)
  "Show \"slim\" flymake status in mode line."
  (when e-w
    (setq flymake-mode-line-e-w e-w))
  (when status
    (setq flymake-mode-line-status status))
  (let* ((mode-line " Φ"))
    (when (> (length flymake-mode-line-e-w) 0)
      (setq mode-line (concat mode-line ":" flymake-mode-line-e-w)))
    (setq mode-line (concat mode-line flymake-mode-line-status))
    (setq flymake-mode-line mode-line)
    (force-mode-line-update)))

(defun own/flatten (mylist)
  (cond
   ((null mylist) nil)
   ((atom mylist) (list mylist))
   (t
    (append (own/flatten (car mylist)) (own/flatten (cdr mylist))))))

#+end_src
** Hooks

Mark FIXME, SIGITODO, TODO and BUG
#+begin_src emacs-lisp :tangle yes
(defun own/hook-mark-todo () 
  "A hook that sets bold reserved words FIXME, SIGITODO, TODO and BUG"
  (font-lock-add-keywords nil
						  '(("\\<\\(FIXME\\|SIGITODO\\|TODO\\|BUG\\):"
							 1 font-lock-warning-face t))))

#+end_src

Clean Modeline
#+begin_src emacs-lisp :tangle yes
(defun own/hook-clean-mode-line ()
  (interactive)
  (loop for cleaner in own/mode-line-cleaner-alist
        do (let* ((mode (car cleaner))
				  (mode-def (cdr cleaner))
				  (mode-str (if (symbolp  mode-def)
								(funcall mode-def)
							  mode-def))
				  (old-mode-str (cdr (assq mode minor-mode-alist))))
             (when old-mode-str
			   (setcar old-mode-str mode-str))
			 ;; major mode
             (when (eq mode major-mode)
               (setq mode-name mode-str)))))
#+end_src




* Appearance
** Basic

Modeline
#+begin_src emacs-lisp :tangle yes
;; POWERLINE
(require 'powerline)
(powerline-center-theme)

(add-hook 'after-change-major-mode-hook 'own/hook-clean-mode-line)
#+end_src

Buffer
#+begin_src emacs-lisp :tangle yes
(global-linum-mode 1) ;; Line numbers
(require 'magit) ;; disable line numbers in magit because its slower
(add-hook 'magit-mode-hook '(lambda () (linum-mode 0)))
#+end_src

Git
#+begin_src emacs-lisp :tangle yes
(unless own/is-nox 
	(require 'git-gutter-fringe)
	(global-git-gutter-mode +1))
#+end_src

Unique buffer names

#+begin_src emacs-lisp :tangle yes
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src

** UX
Don't use yes-or-no but y-or-n because it's faster !!
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)
(setq ido-create-new-buffer 'always)
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+end_src

Display whitespaces when using whitespace mode
#+begin_src emacs-lisp :tangle yes
(setq whitespace-display-mappings
       ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
      '(
        (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
        (newline-mark 10 [182 10]) ; 10 LINE FEED
        (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
        ))

;; make whitespace-mode use just basic coloring
(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))
#+end_src

Spelling
TODO: revisit
#+begin_src emacs-lisp :tangle yes
;(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

Syntax checking appearance
#+begin_src emacs-lisp :tangle yes
(defalias 'flymake-report-status 'own/flymake-report-status-slim)
#+end_src

Buffers
TODO: revisit
#+begin_src emacs-lisp :tangle yes
(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (reusable-frames . visible)
               (side            . bottom)
               (window-height   . 0.4)))
#+end_src

** Text
Only use spaces with witdh 4
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4
	  tab-width 4) ;; use only tabs and no spaces
#+end_src
Delimiters (brackets, ...) with rainbow collors
#+begin_src emacs-lisp :tangle yes
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
;(global-rainbow-delimiters-mode)
#+end_src
Wrapping lines
#+begin_src emacs-lisp :tangle yes
(setq truncate-lines nil)
(setq fill-column 80)
(add-hook 'text-mode-hook '(lambda ()
    (setq truncate-lines nil
          word-wrap t)))
(add-hook 'prog-mode-hook '(lambda ()
    (setq truncate-lines nil
          word-wrap nil)))
#+end_src
** Themes
#+begin_src emacs-lisp :tangle yes
(when own/enable-themes
  (load-theme 'pastels-on-dark t)
)
#+end_src

** Various
Highlight pastes and other things

#+begin_src emacs-lisp :tangle yes
(require 'volatile-highlights)
(volatile-highlights-mode t)
#+end_src


* Programming


General

#+begin_src emacs-lisp :tangle yes
(add-hook 'prog-mode-hook 'own/hook-mark-todo)
#+end_src

** Yasnippet
#+begin_src emacs-lisp :tangle yes
(require 'yasnippet)
(yas/global-mode 1)

(setq yas-snippet-dirs (append yas-snippet-dirs
                         '("~/.emacs.d/snippets")))
;; Disable TAB for yasnippets
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)

#+end_src

** Autocomplete
#+begin_src emacs-lisp :tangle yes
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Python

#+begin_src emacs-lisp :tangle yes
(setq auto-mode-alist (append '(("/*.\.py$" . python-mode)) auto-mode-alist))

;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
(setq py-autopep8-options '("--max-line-length=120"))

(require 'flymake-python-pyflakes)

(defun own/virtualenv-flymake ()
  (interactive)
  (setq virtualenv-exec (concat own/py-venvs "/" (projectile-project-name) "/bin/pyflakes"))
  (message virtualenv-exec)
  (if (file-exists-p virtualenv-exec)
	  (setq flymake-python-pyflakes-executable virtualenv-exec)
	(setq flymake-python-pyflakes-executable "pyflakes"))
  (flymake-python-pyflakes-load))
(add-hook 'python-mode-hook 'own/virtualenv-flymake)

(add-hook 'python-mode-hook 'anaconda-mode)
(eval-after-load "company"
 '(add-to-list 'company-backends 'company-anaconda))
#+end_src

** GO

#+begin_src emacs-lisp :tangle yes
(eval-after-load "go-mode"
  '(require 'flymake-go))

(setq exec-path (cons "/usr/local/go/bin" exec-path))
(add-to-list 'exec-path (concat own/go-path "/bin"))

(add-hook 'go-mode-hook '(lambda ()
						   (add-hook 'before-save-hook 'gofmt-before-save)
										; Customize compile command to run go build
						   (if (not (string-match "go" compile-command))
							   (set (make-local-variable 'compile-command)
									"go generate && go build -v && go test -v && go vet"))
						   (local-set-key (kbd "M-.") 'godef-jump)))

(add-to-list 'load-path (concat own/go-path "/src/github.com/golang/lint/misc/emacs"))
(add-hook 'golint-setup-hook '(lambda () (getenv "PATH"))) ;; strange golint bugfix
(require 'golint)
#+end_src

* Major modes

** ORG mode
#+begin_src emacs-lisp :tangle yes
(require 'org-install)
(require 'org-habit)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(add-hook 'org-mode-hook 'flyspell-mode)

(setq org-log-done t
	  org-agenda-files (own/flatten (mapcar 'file-expand-wildcards (own/flatten own/org-agenda-files)))
	  org-directory own/org-directory
	  org-src-fontify-natively t)

#+end_src

** MU
#+begin_src emacs-lisp :tangle yes
(when own/enable-email
  (add-to-list 'load-path own/mu4e-load-path)
  ;; make sure mu4e is in your load-path
  (require 'mu4e)

  (setq mu4e-html2text-command "html2text -b 72")

  (when window-system ;; this is a workaround because emacs instances could deadlock mu
    (setq mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
          mu4e-update-interval 600)
    (mu4e-update-mail-and-index t))

  ;; enable inline images
  (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types)))
  
  (add-hook 'mu4e-index-updated-hook
    (defun own/mail-updated ()
      (shell-command "notify-send \"Mail index updated\"")))

#+end_src

* Tweaks

IBUFFER
#+begin_src emacs-lisp :tangle yes
(add-hook 'ibuffer-hook
		  (lambda ()
			(ibuffer-vc-set-filter-groups-by-vc-root)
			(unless (eq ibuffer-sorting-mode 'alphabetic)
			  (ibuffer-do-sort-by-alphabetic))))
#+end_src

* Keybindings
** Basic configuration
#+begin_src emacs-lisp :tangle yes
(message "setting up keybindings")

(defhydra hydra-ace (:exit t)
  "ace-jump"
  ("c" ace-jump-char-mode "char")
  ("j" ace-jump-word-mode "word")
  ("l" ace-jump-line-mode "line")
  ("b" ace-jump-buffer "buffer")
  ("w" ace-window "window")
  ("u" ace-jump-zap-up-to-char "zap up to char")
  ("z" ace-jump-zap-to-char "zap to char")
  )
(global-set-key (kbd "s-<") 'hydra-ace/body)

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C-S-s") 'mc/mark-next-like-this)
(global-set-key (kbd "C-S-r") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-S-a") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)

(global-set-key (kbd "<f8>")   'own/fd-switch-dictionary)
(global-set-key (kbd "C-x C-k") 'own/delete-current-buffer-file)
(global-set-key (kbd "C-x C-r") 'own/rename-current-buffer-file)
#+end_src
** Text manipulation

Lines
#+begin_src emacs-lisp :tangle yes

(defhydra hydra-lines ()
  "Editing lines"
  ("a" own/new-line-after "new line after")
  ("b" own/new-line-before "new line before")
  ("d" own/duplicate-line "duplicate")
  ("w" delete-blank-lines "delete blank lines around line")
  ("c" own/combine-lines "combine with next line"))
(global-set-key (kbd "s-š") 'hydra-lines/body)

#+end_src

Regions
#+begin_src emacs-lisp :tangle yes

;; SELECTION
(defhydra hydra-regions ()
  "Editing regions"
  ("e" er/expand-region "Expand region")
  ("w" delete-region "Delete region" :exit t)
  ("i" indent-region "Indent region")
  ("t" comment-or-uncomment-region "Comment / Uncomment" :exit t))
(global-set-key (kbd "s-đ") 'hydra-regions/body)

#+end_src

** Specific global and local major/minor modes
#+begin_src emacs-lisp :tangle yes
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

#+end_src
** HELM
#+begin_src emacs-lisp :tangle yes

(defhydra hydra-helm (:exit t)
  "Helms"
  ("i" helm-imenu "imenu")
  ("a" helm-mini "mini")
  ("o" helm-occur "occur")
  ("y" helm-yas-complete "yas")
  ("k" helm-show-kill-ring "kill ring")
  ("f" helm-projectile "projectile")
  ("r" helm-recentf "recent files")
  ("b" helm-buffers-list "buffers")
  ("h" helm-helm-commands "helm commands")
  ("t" helm-top "top"))
(global-set-key (kbd "s-a") 'hydra-helm/body)



#+end_src
** Programming
#+begin_src emacs-lisp :tangle yes
(define-key yas-minor-mode-map (kbd "s--") 'yas-expand)
;(global-set-key "s-z" 'zencoding-expand-line)
#+end_src
** Custom remapping of keybindings
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "s-č") 'undo)

#+end_src
** Custom shortcuts
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "<f5>") 'rgrep)
(global-set-key (kbd "<f7>") 'mu4e)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src


* After main INIT
#+begin_src emacs-lisp :tangle yes
(if (fboundp 'menu-bar-mode) (menu-bar-mode t))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(own/etc-load "patches.el")

(setq custom-file (concat user-emacs-directory "etc/custom.el"))
(load custom-file)

(message "Initialization finished sucessfully")
#+end_src
